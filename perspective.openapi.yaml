openapi: 3.0.3
info:
  title: Open Multi-Perspective Issuance Corroboration APIv2 Spec Perspective Spec
  description: |-
    This is the spec for the Open MPIC Perspective Protocol. This API implements a call to a single perspective for Domain Control Validation (DCV) and CAA checking. Note: a single perspective may only implemnet one of these endpoints. They do not need to be co-locoated. Also, the JSON objects and responses specified here can be transported over alternative transports like gRPC or event managers.
  termsOfService: https://tbd
  contact:
    email: open-mpic@princeton.edu
  license:
    name: MIT License
  version: 2.1.0

externalDocs:
  description: Find out more about the project at open-mpic.org
  url: https://open-mpic.org/

servers:
  - url: https://your-perspective-api.example.com/

paths:
  /perspective/dcv:
    post:
      summary: Perform a single perspective request for DCV.
      requestBody:
        description: Parameters for MPIC
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DcvCheckRequest'
        required: true
      responses:
        '200':
          description: Successfully processed request. Validation may-or-may-not be successful. Check response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerspectiveResponsesValidation'
        '400':
          description: Bad Request
        '403':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /perspective/caa:
    post:
      summary: Perform a single perspective request for CAA checking.
      requestBody:
        description: Parameters for MPIC
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaaCheckRequest'
        required: true
      responses:
        '200':
          description: Successfully processed request. Validation may-or-may-not be successful. Check response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerspectiveResponseCAA'
              
        '400':
          description: Bad Request
        '403':
          description: Unauthorized
        '500':
          description: Internal Server Error

components:
  schemas:
    
    DomainOrIPTarget:
      type: string
      example: "example.com"
      description: "The FQDN (no trailing .) or public IP for which control is being validated."
    
    DcvCheckRequest:
      type: object
      properties:
        domain_or_ip_target:
          $ref: '#/components/schemas/DomainOrIPTarget'
        dcv_check_parameters:
          $ref: '#/components/schemas/DcvCheckParameters'

    DcvCheckParameters:
      type: object
      properties:
        validation_method:
          $ref: '#/components/schemas/ValidationMethod'
        validation_details:
          description: "The validation method(s) to be performed at the various network perspectives."
          oneOf:
            - $ref: '#/components/schemas/AcmeHttp01'
            - $ref: '#/components/schemas/AcmeDns01'
            - $ref: '#/components/schemas/WebsiteChangeV2'
            - $ref: '#/components/schemas/DNSChange'

    CaaCheckRequest:
      type: object
      properties:
        domain_or_ip_target:
          $ref: '#/components/schemas/DomainOrIPTarget'
        caa_check_parameters:
          $ref: '#/components/schemas/CaaCheckParameters'

    CaaCheckParameters:
      type: object
      properties:
        certificate_type:
          type: string
          enum: ['tls-server', 'tls-server:wildcard', 's-mime'] # doc: https://swagger.io/docs/specification/data-models/enums/
          description: "Specifies the type of certificate the CA will be signing for theapplicant as it pertains to parsing CAA records."
        caa_domains:
          type: array
          example:
            - "letsencrypt.org"
          description: "Valid CAA domain names in issue or issuewild (e.g., CAA 0 issue     \"letsencrypt.org\")tags that permit issuance by the calling CA. If left empty, the     default configured CAA domain name(s) are used."
          items:
            type: string
        
          
            
    ValidationMethod:
      description:  "The type of domain control validation the netwrok perspectives should use."
      type: string
      enum: ['acme-http-01', 'website-change-v2', 'acme-dns-01', 'dns-change', 'tls-using-alpn'] # doc: https://swagger.io/docs/specification/data-models/enums/
    


    WebsiteChangeV2:
      type: object
      required: 
      - http_token_path
      - protocol
      - expected-challenge
      properties:
        http_token_path:
          type: string
          example: '/.well-known/pki-validation/challenge.html'
          description: "The path to check for the challenge token. The full URL used to retrieve the expected value is constructed via the syntax \"http://\" + identifier + path."
        challenge_value:
          type: string
          example: 'challenge_token'
          description: "The expected value to be observed at this URL. The API ensures the challenge value is contained in the response webpage obtained from the domain."
        match_regex:
          type: string
          example: '^\w*TOKENVAL\w*$'
          description: "An optional regex string which must have a match in the returned webpage contents for the challenge to be successful. This is checked in addition to ensuring the token is contained in the webapge."
        protocol:
          description: "HTTP or HTTPS"
          type: string
          enum: ['http', 'https']

    AcmeHttp01:
      type: object
      required: 
      - token
      - challenge_value
      properties:
        token:
          type: string
          example: 'ACME_TOKEN'
          description: "The token for the ACME http-01 challenge as described in RFC ACME."
        challenge_value:
          type: string
          example: 'challenge_token'
          description: "The expected value to be observed at this URL. The value will be checked by stripping leading or trailing whitespace from both the response and the expected value and then performing an equality check on the two strings."
    
    DNSChange:
      type: object
      required:
        - dns_name_prefix
        - dns_record_type
        - challenge_value
      properties:
        dns_name_prefix:
          type: string
          example: '_dcv'
          description: "The domain label prefix where to look for the expected-challenge. If label is not an empty string, the FQDN which will be queried for the expected-challenge is constructed via the syntax label + \".\" + domain_or_ip_target + \".\". If label is an empty string the query is sent directly to domain_or_ip_target + \".\". domain_or_ip_target MUST be a domain to use this method."
        dns_record_type:
          type: string
          example: 'TXT'
          description: "The DNS record type to be queried."
        challenge_value:
          type: string
          example: 'challenge_token'
          description: "The expected value to be observed as a response to this DNS challenge. The challenge will be completed successfully if the expected-challenge is observed within one of the RDATA fields associated with this DNS record type at the FQDN."
          

    AcmeDns01:
      type: object
      required:
        - challenge_value
      properties:
        challenge_value:
          type: string
          example: 'challenge_token'
          description: "The expected value to be observed as a response to this DNS challenge. The challenge will be completed successfully if the expected-challenge is observed byte-for-byte identical in one of the RDATA fields associated with this DNS record type at the _acme-challenge.domain_or_ip_target. To use this method, domain_or_ip_target MUST be a domain."
          


    DetailsHTTPMethod:
      type: object
      description: "Details related to the http-based validaiton methods from a perspective."
      required:
        - response_history
        - response_url
        - response_status_code
        - response_page
        - resolved_ip
      properties:
        response_history:
          description: "An array of all redirects that were given before the final response was found. It can be empty if there are no redirects. Otherwise it contains a list of objects with status codes and the URLs that returned those status codes in order starting with the original challenge URL."
          type: array
          items:
            type: object
            required:
            - status_code
            - url
            properties:
              status_code:
                type: integer
                description: "The status code retrieved from this URL."
              url:
                type: string
                description: "The URL that returned this status code."
        response_url:
          description: "The URL that returned the final response. This is equal to the original challenge URL if there are no redirects."
          type: string
        response_status_code:
          type: integer
          description: "The status code returned by the final URL."
        response_page:
          type: string
          description: "A base64 encoding of the first 100 bytes of the page returned at the final URL. If the page is less than 100 bytes, the entire page is returned in base64."
        resolved_ip:
          type: string
          description: "The IP address used to communicate with the domain_or_ip_target."

    DetailsDNSMethod:
      type: object
      required:
        - records_seen
        - status_code
        - ad_flag
      properties:
        records_seen:
          type: string
          description: "A base64 encoding of the RRset retrieved for the DNS query. Empty string is acceptable if there are no RRsets"
        status_code:
          type: integer
          description: "The DNS status code resulting from the query."
        ad_flag:
          type: boolean
          description: "Whether or not the recursive resolver set the Authenticated Data (AD) flag in its DNS response."
                


    # TLS-ALPN is getting nixed from the standard until there is implementation to accompany it.
    #TLSALPNValidation:
    #  type: object
    #  required:
    #  - expected-challenge
    #  properties:
    #    expected-challenge:
    #      type: string
    #      example: 'challenge_token'
    #      description: "The expected value to be observed inside the acmeIdentifier extension of #the self-signed certificate presented during the TLS handshake. The value will be #checked by stripping leading or trailing whitespace from both the extension value and #the expected value and then performing an equality check on the two strings."
PerspectiveResponseValidation:
      type: object
      required:
        - perspective
        - check_passed
        - timestamp_ns
        - check_type
        - details
        - errors
      properties:
        perspective:
          type: string
          example: "arin.us-east-2"
          description: "A unique identifier for the perspective used in the format \"rir.location\""
        check_passed:
          type: boolean
          example: True
          description: "Whether or not domain control validation was successful at this perspective."
        timestamp_ns:
          type: integer
          description: "The epoch timestamp in nanoseconds of the check."
        check_type:
          $ref: '#/components/schemas/CheckTypeDCV'
        attestation:
          type: object
          description: "Information (e.g., digital signatures) from a remote perspective that allows for the response generated to be verified."
        details:
          type: object
          properties:
            acme_http_01:
              $allOf: '#/components/schemas/DetailsHTTPMethod'
              nullable: true
            acme_dns_01:
              $allOf: '#/components/schemas/DetailsDNSMethod'
              nullable: true
            website_change_v2:
              $allOf: '#/components/schemas/DetailsHTTPMethod'
              nullable: true
            dns_change:
              $allOf: '#/components/schemas/DetailsDNSMethod'
              nullable: true
        errors:
          type: array
          items:
            type: object
            properties:
              error-type:
                type: string
                example: "validation:acme-dns-01"
                description: "The type of the error in the format \"type:subtype\". If associated with a validation method the error type should read \"validation:affected-method\"."
              error-message:
                type: string
                example: "Observed token 1234 instead of expected token 4567 at _acme-challenge.example.com in record type TXT."
                description: "An error message explaining the observed error."
          nullable: true
            
    PerspectiveResponseCAA:
        type: object
        required:
          - perspective
          - is_valid
          - errors
          - timestamp_ns
          - check_type
          - details
        properties:
          perspective:
            type: string
            example: "arin.us-east-2"
            description: "A unique identifier for the perspective used in the format \"rir.location\""
          is_valid:
            type: boolean
            example: True
            description: "Indicator for whether the CAA check was successful at this perspective."
          check_type:
            $ref: '#/components/schemas/CheckTypeCAA'
          timestamp_ns:
            type: integer
            description: "The epoch timestamp in nanoseconds of the check."
          attestation:
            type: object
            description: "Information (e.g., digital signatures) from a remote perspective that allows for the response generated to be verified."
          details:
            type: object
            required:
              - present
              - found_at
              - response
            description: "Details relating to the CAA lookup at this perspective. Implementations may choose to expose additional details or omit details depending on the result."
            properties:
              present:
                description: "Indicates if a record was found when resolving CAA records for an identifier."
                type: boolean
              found_at:
                description: "The domain where CAA records were resolved when performing CAA lookup for identifier. (CAA records may be hosted at parent zone of identifier.)"
                type: string
                nullable: true
              response:
                description: "If CAA record present: base64 format of DNS RRset of the response to CAA query."
                type: string
                nullable: true
          errors:
            type: array
            items:
              type: object
              properties:
                error-type:
                  type: string
                  example: "caa:timeout"
                  description: "The type of the error in the format \"type:subtype\"."
                error-message:
                  type: string
                  example: "Experienced a timeout when attempting to query example.com in CAA."
                  description: "An error message explaining the observed error."
            nullable: true

          
          

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
security:
  - bearerAuth: []